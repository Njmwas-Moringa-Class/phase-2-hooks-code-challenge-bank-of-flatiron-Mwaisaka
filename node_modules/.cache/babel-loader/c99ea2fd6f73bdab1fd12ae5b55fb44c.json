{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mwaisakajnr/Development/code/phase_2/phase-2-hooks-code-challenge-bank-of-flatiron-Mwaisaka/src/components/TransactionsList.js\",\n    _s = $RefreshSig$();\n\n// // //TransactionsList.js\n// // import React, { useEffect, useState, useCallback } from \"react\";\n// // import Transaction from \"./Transaction\";\n// // import AddTransactionForm from \"./AddTransactionForm\";\n// // function TransactionsList({ handleSearch, searchTerm }) {\n// //   const [transactionsData, setTransactionsData] = useState([]);\n// //   const [filteredTransactions, setFilteredTransactions] = useState([]);\n// //   const applySearchFilter = useCallback(\n// //     (data) => {\n// //       const filtered = data.filter((transaction) =>\n// //         transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n// //       );\n// //       setFilteredTransactions(filtered);\n// //     },\n// //     [searchTerm]\n// //   );\n// //   useEffect(() => {\n// //     // Fetch data from the provided JSON server\n// //     fetch(\"http://localhost:8001/transactions\")\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error(`HTTP error! Status: ${response.status}`);\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         setTransactionsData(data);\n// //         applySearchFilter(data);\n// //       })\n// //       .catch((error) => {\n// //         console.error(\"Error fetching data:\", error);\n// //       });\n// //   }, [searchTerm, applySearchFilter]); // Include applySearchFilter in the dependency array\n// //   const addTransaction = (newTransaction) => {\n// //     // Post the new transaction to the backend API for persistence\n// //     fetch(\"http://localhost:8001/transactions\", {\n// //       method: \"POST\",\n// //       headers: {\n// //         \"Content-Type\": \"application/json\",\n// //       },\n// //       body: JSON.stringify(newTransaction),\n// //     })\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error(`HTTP error! Status: ${response.status}`);\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         setTransactionsData([...transactionsData, data]); // Update the local state with the new transaction\n// //         applySearchFilter([...transactionsData, data]); // Update filtered transactions as well\n// //         console.log(\"New transaction added:\", data);\n// //       })\n// //       .catch((error) => {\n// //         console.error(\"Error adding new transaction:\", error);\n// //       });\n// //   };\n// //   return (\n// //     <div>\n// //       <AddTransactionForm onAddTransaction={addTransaction} />\n// //       <table className=\"ui celled striped padded table\">\n// //         <tbody>\n// //           <tr>\n// //             <th>\n// //               <h3 className=\"ui center aligned header\">Date</h3>\n// //             </th>\n// //             <th>\n// //               <h3 className=\"ui center aligned header\">Description</h3>\n// //             </th>\n// //             <th>\n// //               <h3 className=\"ui center aligned header\">Category</h3>\n// //             </th>\n// //             <th>\n// //               <h3 className=\"ui center aligned header\">Amount</h3>\n// //             </th>\n// //           </tr>\n// //           {filteredTransactions.map((transaction) => (\n// //             <Transaction\n// //               key={transaction.id}\n// //               date={transaction.date}\n// //               description={transaction.description}\n// //               category={transaction.category}\n// //               amount={transaction.amount}\n// //             />\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // }\n// // export default TransactionsList;\n// //Additional deliverable 1 achieved. \n// // TransactionsList.js\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import Transaction from \"./Transaction\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n// function TransactionsList({ handleSearch, searchTerm }) {\n//   const [transactionsData, setTransactionsData] = useState([]);\n//   const [filteredTransactions, setFilteredTransactions] = useState([]);\n//   const [sortCriteria, setSortCriteria] = useState(null);\n//   const applySearchFilter = useCallback(\n//     (data) => {\n//       const filtered = data.filter((transaction) =>\n//         transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n//       );\n//       setFilteredTransactions(filtered);\n//     },\n//     [searchTerm]\n//   );\n//   const applySort = useCallback(\n//     (data) => {\n//       if (sortCriteria === \"category\") {\n//         data.sort((a, b) => a.category.localeCompare(b.category));\n//       } else if (sortCriteria === \"description\") {\n//         data.sort((a, b) => a.description.localeCompare(b.description));\n//       }\n//       setFilteredTransactions([...data]);\n//     },\n//     [sortCriteria]\n//   );\n//   useEffect(() => {\n//     // Fetch data from the provided JSON server\n//     fetch(\"http://localhost:8001/transactions\")\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTransactionsData(data);\n//         applySearchFilter(data);\n//         applySort(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching data:\", error);\n//       });\n//   }, [searchTerm, applySearchFilter, applySort]); // Include applySearchFilter and applySort in the dependency array\n//   const addTransaction = (newTransaction) => {\n//     // Post the new transaction to the backend API for persistence\n//     fetch(\"http://localhost:8001/transactions\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(newTransaction),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTransactionsData([...transactionsData, data]); // Update the local state with the new transaction\n//         applySearchFilter([...transactionsData, data]); // Update filtered transactions as well\n//         applySort([...transactionsData, data]); // Update sorted transactions as well\n//         console.log(\"New transaction added:\", data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error adding new transaction:\", error);\n//       });\n//   };\n//   const handleSortChange = (criteria) => {\n//     setSortCriteria(criteria);\n//     applySort(filteredTransactions);\n//   };\n//   return (\n//     <div>\n//       <AddTransactionForm onAddTransaction={addTransaction} />\n//       <div>\n//         <label>Sort By: </label>\n//         <select onChange={(e) => handleSortChange(e.target.value)}>\n//           <option value=\"\">--Select--</option>\n//           <option value=\"category\">Category</option>\n//           <option value=\"description\">Description</option>\n//         </select>\n//       </div>\n//       <table className=\"ui celled striped padded table\">\n//         <tbody>\n//           <tr>\n//             <th>\n//               <h3 className=\"ui center aligned header\">Date</h3>\n//             </th>\n//             <th>\n//               <h3 className=\"ui center aligned header\">Description</h3>\n//             </th>\n//             <th>\n//               <h3 className=\"ui center aligned header\">Category</h3>\n//             </th>\n//             <th>\n//               <h3 className=\"ui center aligned header\">Amount</h3>\n//             </th>\n//           </tr>\n//           {filteredTransactions.map((transaction) => (\n//             <Transaction\n//               key={transaction.id}\n//               date={transaction.date}\n//               description={transaction.description}\n//               category={transaction.category}\n//               amount={transaction.amount}\n//             />\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n// export default TransactionsList;\n// TransactionsList.js\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Transaction from \"./Transaction\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction TransactionsList({\n  handleSearch,\n  searchTerm\n}) {\n  _s();\n\n  const [transactionsData, setTransactionsData] = useState([]);\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  const [sortCriteria, setSortCriteria] = useState(null);\n  const applySearchFilter = useCallback(data => {\n    const filtered = data.filter(transaction => transaction.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    setFilteredTransactions(filtered);\n  }, [searchTerm]);\n  const applySort = useCallback(data => {\n    if (sortCriteria === \"category\") {\n      data.sort((a, b) => a.category.localeCompare(b.category));\n    } else if (sortCriteria === \"description\") {\n      data.sort((a, b) => a.description.localeCompare(b.description));\n    }\n\n    setFilteredTransactions([...data]);\n  }, [sortCriteria]);\n  useEffect(() => {\n    // Fetch data from the provided JSON server\n    fetch(\"http://localhost:8001/transactions\").then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      return response.json();\n    }).then(data => {\n      setTransactionsData(data);\n      applySearchFilter(data);\n      applySort(data);\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n  }, [searchTerm, applySearchFilter, applySort]); // Include applySearchFilter and applySort in the dependency array\n\n  const addTransaction = newTransaction => {\n    // Post the new transaction to the backend API for persistence\n    fetch(\"http://localhost:8001/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTransaction)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      return response.json();\n    }).then(data => {\n      setTransactionsData([...transactionsData, data]); // Update the local state with the new transaction\n\n      applySearchFilter([...transactionsData, data]); // Update filtered transactions as well\n\n      applySort([...transactionsData, data]); // Update sorted transactions as well\n\n      console.log(\"New transaction added:\", data);\n    }).catch(error => {\n      console.error(\"Error adding new transaction:\", error);\n    });\n  };\n\n  const handleSortChange = criteria => {\n    setSortCriteria(criteria);\n    applySort(filteredTransactions);\n  };\n\n  const deleteTransaction = id => {\n    // Delete the transaction from the backend\n    fetch(`http://localhost:8001/transactions/${id}`, {\n      method: \"DELETE\"\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      return response.json();\n    }).then(() => {\n      // Update the local state by removing the deleted transaction\n      const updatedTransactions = transactionsData.filter(transaction => transaction.id !== id);\n      setTransactionsData(updatedTransactions);\n      applySearchFilter(updatedTransactions);\n      applySort(updatedTransactions);\n      console.log(\"Transaction deleted:\", id);\n    }).catch(error => {\n      console.error(\"Error deleting transaction:\", error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      onAddTransaction: addTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Sort By: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => handleSortChange(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Select--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"category\",\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"description\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"ui celled striped padded table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"ui center aligned header\",\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"ui center aligned header\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"ui center aligned header\",\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"ui center aligned header\",\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"ui center aligned header\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), filteredTransactions.map(transaction => /*#__PURE__*/_jsxDEV(Transaction, {\n          date: transaction.date,\n          description: transaction.description,\n          category: transaction.category,\n          amount: transaction.amount,\n          onDelete: deleteTransaction\n        }, transaction.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionsList, \"TCiaZxdQbK+w/KhwjpuP1XRYrH0=\");\n\n_c = TransactionsList;\nexport default TransactionsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsList\");","map":{"version":3,"sources":["/home/mwaisakajnr/Development/code/phase_2/phase-2-hooks-code-challenge-bank-of-flatiron-Mwaisaka/src/components/TransactionsList.js"],"names":["React","useEffect","useState","useCallback","Transaction","AddTransactionForm","TransactionsList","handleSearch","searchTerm","transactionsData","setTransactionsData","filteredTransactions","setFilteredTransactions","sortCriteria","setSortCriteria","applySearchFilter","data","filtered","filter","transaction","description","toLowerCase","includes","applySort","sort","a","b","category","localeCompare","fetch","then","response","ok","Error","status","json","catch","error","console","addTransaction","newTransaction","method","headers","body","JSON","stringify","log","handleSortChange","criteria","deleteTransaction","id","updatedTransactions","e","target","value","map","date","amount"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,SAASC,gBAAT,CA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","sourcesContent":["// // //TransactionsList.js\n// // import React, { useEffect, useState, useCallback } from \"react\";\n// // import Transaction from \"./Transaction\";\n// // import AddTransactionForm from \"./AddTransactionForm\";\n\n// // function TransactionsList({ handleSearch, searchTerm }) {\n// //   const [transactionsData, setTransactionsData] = useState([]);\n// //   const [filteredTransactions, setFilteredTransactions] = useState([]);\n\n// //   const applySearchFilter = useCallback(\n// //     (data) => {\n// //       const filtered = data.filter((transaction) =>\n// //         transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n// //       );\n// //       setFilteredTransactions(filtered);\n// //     },\n// //     [searchTerm]\n// //   );\n\n// //   useEffect(() => {\n// //     // Fetch data from the provided JSON server\n// //     fetch(\"http://localhost:8001/transactions\")\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error(`HTTP error! Status: ${response.status}`);\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         setTransactionsData(data);\n// //         applySearchFilter(data);\n// //       })\n// //       .catch((error) => {\n// //         console.error(\"Error fetching data:\", error);\n// //       });\n// //   }, [searchTerm, applySearchFilter]); // Include applySearchFilter in the dependency array\n\n// //   const addTransaction = (newTransaction) => {\n// //     // Post the new transaction to the backend API for persistence\n// //     fetch(\"http://localhost:8001/transactions\", {\n// //       method: \"POST\",\n// //       headers: {\n// //         \"Content-Type\": \"application/json\",\n// //       },\n// //       body: JSON.stringify(newTransaction),\n// //     })\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error(`HTTP error! Status: ${response.status}`);\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         setTransactionsData([...transactionsData, data]); // Update the local state with the new transaction\n// //         applySearchFilter([...transactionsData, data]); // Update filtered transactions as well\n// //         console.log(\"New transaction added:\", data);\n// //       })\n// //       .catch((error) => {\n// //         console.error(\"Error adding new transaction:\", error);\n// //       });\n// //   };\n\n// //   return (\n// //     <div>\n// //       <AddTransactionForm onAddTransaction={addTransaction} />\n// //       <table className=\"ui celled striped padded table\">\n// //         <tbody>\n// //           <tr>\n// //             <th>\n// //               <h3 className=\"ui center aligned header\">Date</h3>\n// //             </th>\n// //             <th>\n// //               <h3 className=\"ui center aligned header\">Description</h3>\n// //             </th>\n// //             <th>\n// //               <h3 className=\"ui center aligned header\">Category</h3>\n// //             </th>\n// //             <th>\n// //               <h3 className=\"ui center aligned header\">Amount</h3>\n// //             </th>\n// //           </tr>\n// //           {filteredTransactions.map((transaction) => (\n// //             <Transaction\n// //               key={transaction.id}\n// //               date={transaction.date}\n// //               description={transaction.description}\n// //               category={transaction.category}\n// //               amount={transaction.amount}\n// //             />\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // }\n\n// // export default TransactionsList;\n\n\n// //Additional deliverable 1 achieved. \n\n// // TransactionsList.js\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import Transaction from \"./Transaction\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n\n// function TransactionsList({ handleSearch, searchTerm }) {\n//   const [transactionsData, setTransactionsData] = useState([]);\n//   const [filteredTransactions, setFilteredTransactions] = useState([]);\n//   const [sortCriteria, setSortCriteria] = useState(null);\n\n//   const applySearchFilter = useCallback(\n//     (data) => {\n//       const filtered = data.filter((transaction) =>\n//         transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n//       );\n//       setFilteredTransactions(filtered);\n//     },\n//     [searchTerm]\n//   );\n\n//   const applySort = useCallback(\n//     (data) => {\n//       if (sortCriteria === \"category\") {\n//         data.sort((a, b) => a.category.localeCompare(b.category));\n//       } else if (sortCriteria === \"description\") {\n//         data.sort((a, b) => a.description.localeCompare(b.description));\n//       }\n//       setFilteredTransactions([...data]);\n//     },\n//     [sortCriteria]\n//   );\n\n//   useEffect(() => {\n//     // Fetch data from the provided JSON server\n//     fetch(\"http://localhost:8001/transactions\")\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTransactionsData(data);\n//         applySearchFilter(data);\n//         applySort(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching data:\", error);\n//       });\n//   }, [searchTerm, applySearchFilter, applySort]); // Include applySearchFilter and applySort in the dependency array\n\n//   const addTransaction = (newTransaction) => {\n//     // Post the new transaction to the backend API for persistence\n//     fetch(\"http://localhost:8001/transactions\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(newTransaction),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTransactionsData([...transactionsData, data]); // Update the local state with the new transaction\n//         applySearchFilter([...transactionsData, data]); // Update filtered transactions as well\n//         applySort([...transactionsData, data]); // Update sorted transactions as well\n//         console.log(\"New transaction added:\", data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error adding new transaction:\", error);\n//       });\n//   };\n\n//   const handleSortChange = (criteria) => {\n//     setSortCriteria(criteria);\n//     applySort(filteredTransactions);\n//   };\n\n//   return (\n//     <div>\n//       <AddTransactionForm onAddTransaction={addTransaction} />\n//       <div>\n//         <label>Sort By: </label>\n//         <select onChange={(e) => handleSortChange(e.target.value)}>\n//           <option value=\"\">--Select--</option>\n//           <option value=\"category\">Category</option>\n//           <option value=\"description\">Description</option>\n//         </select>\n//       </div>\n//       <table className=\"ui celled striped padded table\">\n//         <tbody>\n//           <tr>\n//             <th>\n//               <h3 className=\"ui center aligned header\">Date</h3>\n//             </th>\n//             <th>\n//               <h3 className=\"ui center aligned header\">Description</h3>\n//             </th>\n//             <th>\n//               <h3 className=\"ui center aligned header\">Category</h3>\n//             </th>\n//             <th>\n//               <h3 className=\"ui center aligned header\">Amount</h3>\n//             </th>\n//           </tr>\n//           {filteredTransactions.map((transaction) => (\n//             <Transaction\n//               key={transaction.id}\n//               date={transaction.date}\n//               description={transaction.description}\n//               category={transaction.category}\n//               amount={transaction.amount}\n//             />\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default TransactionsList;\n\n// TransactionsList.js\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Transaction from \"./Transaction\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction TransactionsList({ handleSearch, searchTerm }) {\n  const [transactionsData, setTransactionsData] = useState([]);\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  const [sortCriteria, setSortCriteria] = useState(null);\n\n  const applySearchFilter = useCallback(\n    (data) => {\n      const filtered = data.filter((transaction) =>\n        transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n      setFilteredTransactions(filtered);\n    },\n    [searchTerm]\n  );\n\n  const applySort = useCallback(\n    (data) => {\n      if (sortCriteria === \"category\") {\n        data.sort((a, b) => a.category.localeCompare(b.category));\n      } else if (sortCriteria === \"description\") {\n        data.sort((a, b) => a.description.localeCompare(b.description));\n      }\n      setFilteredTransactions([...data]);\n    },\n    [sortCriteria]\n  );\n\n  useEffect(() => {\n    // Fetch data from the provided JSON server\n    fetch(\"http://localhost:8001/transactions\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setTransactionsData(data);\n        applySearchFilter(data);\n        applySort(data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, [searchTerm, applySearchFilter, applySort]); // Include applySearchFilter and applySort in the dependency array\n\n  const addTransaction = (newTransaction) => {\n    // Post the new transaction to the backend API for persistence\n    fetch(\"http://localhost:8001/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newTransaction),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setTransactionsData([...transactionsData, data]); // Update the local state with the new transaction\n        applySearchFilter([...transactionsData, data]); // Update filtered transactions as well\n        applySort([...transactionsData, data]); // Update sorted transactions as well\n        console.log(\"New transaction added:\", data);\n      })\n      .catch((error) => {\n        console.error(\"Error adding new transaction:\", error);\n      });\n  };\n\n  const handleSortChange = (criteria) => {\n    setSortCriteria(criteria);\n    applySort(filteredTransactions);\n  };\n\n  const deleteTransaction = (id) => {\n    // Delete the transaction from the backend\n    fetch(`http://localhost:8001/transactions/${id}`, {\n      method: \"DELETE\",\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(() => {\n        // Update the local state by removing the deleted transaction\n        const updatedTransactions = transactionsData.filter(\n          (transaction) => transaction.id !== id\n        );\n        setTransactionsData(updatedTransactions);\n        applySearchFilter(updatedTransactions);\n        applySort(updatedTransactions);\n        console.log(\"Transaction deleted:\", id);\n      })\n      .catch((error) => {\n        console.error(\"Error deleting transaction:\", error);\n      });\n  };\n\n  return (\n    <div>\n      <AddTransactionForm onAddTransaction={addTransaction} />\n      <div>\n        <label>Sort By: </label>\n        <select onChange={(e) => handleSortChange(e.target.value)}>\n          <option value=\"\">--Select--</option>\n          <option value=\"category\">Category</option>\n          <option value=\"description\">Description</option>\n        </select>\n      </div>\n      <table className=\"ui celled striped padded table\">\n        <tbody>\n          <tr>\n            <th>\n              <h3 className=\"ui center aligned header\">Date</h3>\n            </th>\n            <th>\n              <h3 className=\"ui center aligned header\">Description</h3>\n            </th>\n            <th>\n              <h3 className=\"ui center aligned header\">Category</h3>\n            </th>\n            <th>\n              <h3 className=\"ui center aligned header\">Amount</h3>\n            </th>\n            <th>\n              <h3 className=\"ui center aligned header\">Delete</h3>\n            </th>\n          </tr>\n          {filteredTransactions.map((transaction) => (\n            <Transaction\n              key={transaction.id}\n              date={transaction.date}\n              description={transaction.description}\n              category={transaction.category}\n              amount={transaction.amount}\n              onDelete={deleteTransaction}\n            >\n            </Transaction>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default TransactionsList;\n\n\n"]},"metadata":{},"sourceType":"module"}